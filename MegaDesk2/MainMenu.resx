<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>